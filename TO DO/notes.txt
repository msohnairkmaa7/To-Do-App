        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(to right, #007BFF, #00BFFF);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .registration-container {
            background-color: #fff;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
            width: 400px;
            text-align: center;
        }

        h2 {
            margin-bottom: 20px;
            font-size: 28px;
            color: #333;
        }

        .form-group {
            margin-bottom: 20px;
            text-align: left;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-size: 14px;
            color: #555;
        }

        input[type="text"],
        input[type="email"],
        input[type="password"] {
            width: 100%;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        input[type="text"]:focus,
        input[type="email"]:focus,
        input[type="password"]:focus {
            outline: none;
            border-color: #007BFF;
        }

        .btn {
            width: 100%;
            padding: 15px;
            background-color: #007BFF;
            border: none;
            border-radius: 5px;
            color: white;
            font-size: 18px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .btn:hover {
            background-color: #0056b3;
        }

        .form-group a {
            display: block;
            margin-top: 10px;
            text-align: right;
            color: #007BFF;
            text-decoration: none;
            font-size: 14px;
        }

        .form-group a:hover {
            text-decoration: underline;
        }

        p {
            margin-top: 20px;
            font-size: 14px;
            color: #555;
        }

        p a {
            color: #007BFF;
            text-decoration: none;
        }

        p a:hover {
            text-decoration: underline;
        }




        const express= require('express')
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
require("dotenv").config();

//file imports
const { userDataValidation } = require("./utils/authutils")
const userModel = require("./models/userModel")

console.log(process.env.key)

//contants
const app = express();
const PORT = process.env.PORT

//middleware
app.set("view engine","ejs")
app.use(express.urlencoded({extended:true}))   //encoded the data from the form
app.use(express.json())  //json


//db connection
mongoose
    .connect(process.env.MONGO_URL)
    .then(() => {
        console.log("mongodb connected sucessfully")
    })
    .catch((err) =>{
        console.log("err")
    })


//api
app.get('/',(req,res)=>{
    return res.send("hi")
})
app.get('/test',(req,res)=>{
    return res.render("test");
})
app.get('/register',(req,res)=>{
   return res.render("registerPage");
})

app.post('/register',async (req,res)=>{
    console.log("Received form data:", req.body);
    const {name, email, username,password} = req.body
// data validation
try{
    console.log("11")
    await userDataValidation({name,email,username,password})
    console.log("Validation passed:", { name, email, username, password });
} catch(error){
    return res.status(400).json(error)
}

//hashing of password
const hashPassword = await bcrypt.hash(
    password,
    parseInt(process.env.SALT)
);
console.log("Hashed Password:", hashPassword);

// store data in db
const userObj = new userModel({
    name: name,
    email:email , 
    password:hashPassword, 
    username:username
})

try{
    await userObj.save()
    console.log(userObj)
    return res.send({message: "register successfully", data: userObj, status: 201})
}catch(error) {
    return res.send({error: error, message: "internal server error" , status:  500})
}
})

app.get('/login',(req,res)=>{
   return res.render("loginPage");
})


app.listen(PORT, () =>{
    console.log(`server is running at:`)
    console.log(`http:\\localhost:${PORT}`)
})






